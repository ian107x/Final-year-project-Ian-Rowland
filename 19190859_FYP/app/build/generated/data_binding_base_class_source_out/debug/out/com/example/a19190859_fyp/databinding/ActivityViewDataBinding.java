// Generated by view binder compiler. Do not edit!
package com.example.a19190859_fyp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.a19190859_fyp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityViewDataBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextView datatext;

  @NonNull
  public final Button exportdatabutton;

  @NonNull
  public final TextView introductiontext;

  @NonNull
  public final Button returntomain;

  @NonNull
  public final Button viewdatabutton;

  private ActivityViewDataBinding(@NonNull ScrollView rootView, @NonNull TextView datatext,
      @NonNull Button exportdatabutton, @NonNull TextView introductiontext,
      @NonNull Button returntomain, @NonNull Button viewdatabutton) {
    this.rootView = rootView;
    this.datatext = datatext;
    this.exportdatabutton = exportdatabutton;
    this.introductiontext = introductiontext;
    this.returntomain = returntomain;
    this.viewdatabutton = viewdatabutton;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityViewDataBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityViewDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_view_data, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityViewDataBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.datatext;
      TextView datatext = ViewBindings.findChildViewById(rootView, id);
      if (datatext == null) {
        break missingId;
      }

      id = R.id.exportdatabutton;
      Button exportdatabutton = ViewBindings.findChildViewById(rootView, id);
      if (exportdatabutton == null) {
        break missingId;
      }

      id = R.id.introductiontext;
      TextView introductiontext = ViewBindings.findChildViewById(rootView, id);
      if (introductiontext == null) {
        break missingId;
      }

      id = R.id.returntomain;
      Button returntomain = ViewBindings.findChildViewById(rootView, id);
      if (returntomain == null) {
        break missingId;
      }

      id = R.id.viewdatabutton;
      Button viewdatabutton = ViewBindings.findChildViewById(rootView, id);
      if (viewdatabutton == null) {
        break missingId;
      }

      return new ActivityViewDataBinding((ScrollView) rootView, datatext, exportdatabutton,
          introductiontext, returntomain, viewdatabutton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
